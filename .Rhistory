f = truefunction(x)
set.seed(1)
y = f+rnorm(f)/3
par(mfrow=c(1,2))
plot(x,y)
lines(x, f, type="l", lwd=3)
truefunction2 = function(x){
4*x-2 + 2*exp(-16*(4*x-2)^2)
}
x2 = c(0:511)/512
f2 = truefunction2(x2)
set.seed(1)
sigma = sqrt(mean((truefunction2(runif(100000,0,1)))^2))/5
y2 = f2 + rnorm(512, 0, sigma)
plot(x2, y2)
lines(x, f2, type="l", lwd=3)
plot(x,y, cex=0.1)
res = genetic(x, y, "MDL", 0.9, 0.05, 300, 10)
lines(x, res, col="blue", lwd=2)
plot(x2,y2, cex=0.1)
res2 = genetic(x2, y2, "MDL", 0.9, 0.05, 300, 10)
lines(x2, res2, col="blue", lwd=2)
f1.1 = function(x, f, y, res, B){
n = length(x)
beta = res$yHat
ebs = y - beta
mat = matrix(NA, nrow=B, ncol=512)
for(i in 1:B){
ebs_local = sample(ebs, n, replace=TRUE)
y_new = beta + ebs_local
res_new = genetic(x, y_new, "MDL", 0.9, 0.05, 300, 10)
}
return(mat)
}
qiwei = f1.1(x,f,y,res,2)
f1.1 = function(x, f, y, res, B){
n = length(x)
beta = res
ebs = y - beta
mat = matrix(NA, nrow=B, ncol=512)
for(i in 1:B){
ebs_local = sample(ebs, n, replace=TRUE)
y_new = beta + ebs_local
res_new = genetic(x, y_new, "MDL", 0.9, 0.05, 300, 10)
}
return(mat)
}
qiwei = f1.1(x,f,y,res,2)
class(qiwei)
dim(qiwei)
qiwei
f1.1 = function(x, f, y, res, B){
n = length(x)
beta = res
ebs = y - beta
mat = matrix(NA, nrow=B, ncol=512)
for(i in 1:B){
ebs_local = sample(ebs, n, replace=TRUE)
y_new = beta + ebs_local
mat[i, ] = genetic(x, y_new, "MDL", 0.9, 0.05, 300, 10)
}
return(mat)
}
system.time(qiwei <- f1.1(x,f,y,res,2))
qiwei
plot(x, qiwei[1,])
plot(x, qiwei[1,], type="l")
lines(x, qiwei[2,], type="l")
res
groupSplit <- function(x, pos){
#http://stackoverflow.com/questions/16357962
unname(split(x, cumsum(seq_along(x) %in% pos)))
}
generate = function(n, S){
tmp = matrix(sample(c(FALSE,TRUE), S*(n-1), replace=TRUE, prob=c(0.5,0.5)), nrow=S, ncol=n-1)
return(cbind(rep(TRUE, S), tmp)) # the first column must be 1
}
candidateValues = function(population, y, type){
criterionValue = function(i, type){
b = which(population[i,]==TRUE)
yGroup = groupSplit(y, b)
yGroupMean = sapply(yGroup, mean)
yGroupCount = sapply(yGroup, length)
yHat = rep(yGroupMean, yGroupCount)
if(type=="AIC"){
return(length(y)*log(mean((y-yHat)^2))+log(length(y))*2*length(yGroup))
}
if(type=="MDL"){
return(length(yGroup)*log(length(y))+0.5*sum(log(yGroupCount))+length(y)/2*log(mean((y-yHat)^2)))
}
}
values = sapply(1:nrow(population), function(i) criterionValue(i, type))
return(values)
}
makeChildren = function(population, cRanks, pCross, pMutateGene){
S = nrow(population)
n = ncol(population)
methods = sample(c("crossover","mutation"), size=S, replace=TRUE, prob=c(pCross, 1-pCross))
pp = cRanks/sum(cRanks)
ans = lapply(1:(S-1), function(i) {
if(methods[i]=="crossover"){
parents = sample(1:S, size=2, prob=pp)
flag = sample(c(FALSE, TRUE), n, replace=TRUE)
child = population[parents[1], ]
child[flag] = population[parents[2], flag]
return(child)
}
if(methods[i]=="mutation"){
parent = sample(1:S, size=1, prob=pp)
flag = sample(c(FALSE, TRUE), n-1, replace=TRUE, prob=c(1-pMutateGene, pMutateGene))
flag = c(FALSE, flag) # the first column stays 1
child = population[parent, ]
child[flag] = !population[parent, flag]
return(child)
}
})
res = Reduce(rbind, ans)
return(rbind(population[which.max(cRanks), ], res))
}
genetic = function(x, y, type, pCross, pMutateGene, S, nSame){
population = generate(n=n, S=S)
cValues = candidateValues(population=population, y=y, type=type)
i = 0
current_min = min(cValues)
obj_values = c(min(cValues))
while(TRUE){
cRanks = rank(-1*cValues)
population = makeChildren(population=population, cRanks=cRanks, pCross=pCross, pMutateGene=pMutateGene)
cValues = candidateValues(population=population, y=y, type=type)
obj_values = c(obj_values, min(cValues))
#print(min(cValues))
if(min(cValues) < current_min){
i = 0
current_min = min(cValues)
} else {
i = i+1
if(i >= nSame){
b = which(population[which.min(cValues), ]==TRUE)
yGroup = groupSplit(y, b)
yGroupMean = sapply(yGroup, mean)
yGroupCount = sapply(yGroup, length)
yHat = rep(yGroupMean, yGroupCount)
return(yHat)
}
}
}
}
truefunction = function(x){
t = c(0.1, 0.13, 0.15, 0.23, 0.25, 0.4, 0.44, 0.65, 0.76, 0.78, 0.81)
h = c(4, -5, 3, -4, 5, -4.2, 2.1, 4.3, -3.1, 2.1, -4.2)
temp = 0
for(i in 1:11) {
temp = temp + h[i]/2 * (1 + sign(x - t[i])) }
return(temp)
}
n = 512
x = (0:(n-1))/n
f = truefunction(x)
set.seed(1)
y = f+rnorm(f)/3
stopCluster(cls)
groupSplit <- function(x, pos){
#http://stackoverflow.com/questions/16357962
unname(split(x, cumsum(seq_along(x) %in% pos)))
}
generate = function(n, S){
tmp = matrix(sample(c(FALSE,TRUE), S*(n-1), replace=TRUE, prob=c(0.5,0.5)), nrow=S, ncol=n-1)
return(cbind(rep(TRUE, S), tmp)) # the first column must be 1
}
candidateValues = function(population, y, type){
criterionValue = function(i, type){
b = which(population[i,]==TRUE)
yGroup = groupSplit(y, b)
yGroupMean = sapply(yGroup, mean)
yGroupCount = sapply(yGroup, length)
yHat = rep(yGroupMean, yGroupCount)
if(type=="AIC"){
return(length(y)*log(mean((y-yHat)^2))+log(length(y))*2*length(yGroup))
}
if(type=="MDL"){
return(length(yGroup)*log(length(y))+0.5*sum(log(yGroupCount))+length(y)/2*log(mean((y-yHat)^2)))
}
}
values = sapply(1:nrow(population), function(i) criterionValue(i, type))
return(values)
}
makeChildren = function(population, cRanks, pCross, pMutateGene){
S = nrow(population)
n = ncol(population)
methods = sample(c("crossover","mutation"), size=S, replace=TRUE, prob=c(pCross, 1-pCross))
pp = cRanks/sum(cRanks)
ans = lapply(1:(S-1), function(i) {
if(methods[i]=="crossover"){
parents = sample(1:S, size=2, prob=pp)
flag = sample(c(FALSE, TRUE), n, replace=TRUE)
child = population[parents[1], ]
child[flag] = population[parents[2], flag]
return(child)
}
if(methods[i]=="mutation"){
parent = sample(1:S, size=1, prob=pp)
flag = sample(c(FALSE, TRUE), n-1, replace=TRUE, prob=c(1-pMutateGene, pMutateGene))
flag = c(FALSE, flag) # the first column stays 1
child = population[parent, ]
child[flag] = !population[parent, flag]
return(child)
}
})
res = Reduce(rbind, ans)
return(rbind(population[which.max(cRanks), ], res))
}
genetic = function(x, y, type, pCross, pMutateGene, S, nSame){
population = generate(n=n, S=S)
cValues = candidateValues(population=population, y=y, type=type)
i = 0
current_min = min(cValues)
obj_values = c(min(cValues))
while(TRUE){
cRanks = rank(-1*cValues)
population = makeChildren(population=population, cRanks=cRanks, pCross=pCross, pMutateGene=pMutateGene)
cValues = candidateValues(population=population, y=y, type=type)
obj_values = c(obj_values, min(cValues))
#print(min(cValues))
if(min(cValues) < current_min){
i = 0
current_min = min(cValues)
} else {
i = i+1
if(i >= nSame){
b = which(population[which.min(cValues), ]==TRUE)
yGroup = groupSplit(y, b)
yGroupMean = sapply(yGroup, mean)
yGroupCount = sapply(yGroup, length)
yHat = rep(yGroupMean, yGroupCount)
return(yHat)
}
}
}
}
truefunction = function(x){
t = c(0.1, 0.13, 0.15, 0.23, 0.25, 0.4, 0.44, 0.65, 0.76, 0.78, 0.81)
h = c(4, -5, 3, -4, 5, -4.2, 2.1, 4.3, -3.1, 2.1, -4.2)
temp = 0
for(i in 1:11) {
temp = temp + h[i]/2 * (1 + sign(x - t[i])) }
return(temp)
}
n = 512
x = (0:(n-1))/n
f = truefunction(x)
set.seed(1)
y = f+rnorm(f)/3
f1.1 = function(B, x, y, res){
n = length(x)
beta = res
ebs = y - beta
mat = matrix(NA, nrow=B, ncol=512)
for(i in 1:B){
ebs_local = sample(ebs, n, replace=TRUE)
y_new = beta + ebs_local
mat[i, ] = genetic(x, y_new, "MDL", 0.9, 0.05, 300, 10)
}
return(mat)
}
library(parallel)
cls = makeCluster(4)
clusterExport(cls, c("candidateValues","generate",
"genetic","groupSplit","makeChildren"))
system.time(ans <- clusterApply(cls, rep(1, 4), f1.1, x, y, res))
res
res = genetic(x, y, "MDL", 0.9, 0.05, 300, 10)
system.time(ans <- clusterApply(cls, rep(1, 4), f1.1, x, y, res))
clusterExport(cls, c("candidateValues","generate",
"genetic","groupSplit","makeChildren",
"n","x","y","f","res"))
system.time(ans <- clusterApply(cls, rep(1, 4), f1.1, x, y, res))
final = Reduce(rbind, ans)
dim(final)
plot(x, final[1, ],type="l")
line(x, final[2, ],type="l")
line(x, final[2, ])
lines(x, final[2, ],type="l")
lines(x, final[3, ],type="l")
lines(x, final[4, ],type="l")
print(load("~/Desktop/final11.rda"))
plot(x,y, cex=0.1)
plot(x,y, cex=0.1)
lines(x,f,type="l", col="blue")
lb = sapply(1:512, function(i) quantile(final[,i], 0.05))
ub = sapply(1:512, function(i) quantile(final[,i], 0.95))
lines(x,lb,type="l", col="red")
lines(x,up,type="l", col="red")
lines(x,ub,type="l", col="red")
print(load("~/Desktop/final11.rda"))
lb = sapply(1:512, function(i) quantile(final11[,i], 0.05))
ub = sapply(1:512, function(i) quantile(final11[,i], 0.95))
lines(x,lb,type="l", col="red")
lines(x,ub,type="l", col="red")
f1.2 = function(B, x, y, res){
n = length(x)
mat = matrix(NA, nrow=B, ncol=512)
for(i in 1:B){
pos = sample(1:n, n, replace=TRUE)
x_local = x[pos]
y_local = y[pos]
mat[i, ] = genetic(x_local, y_local, "MDL", 0.9, 0.05, 300, 10)
}
return(mat)
}
print(load("~/Desktop/final12.rda"))
plot(x,y, cex=0.1)
lines(x,f,type="l", col="blue")
lb = sapply(1:512, function(i) quantile(final12[,i], 0.05))
ub = sapply(1:512, function(i) quantile(final12[,i], 0.95))
lines(x,lb,type="l", col="red")
lines(x,ub,type="l", col="red")
f1.2 = function(B, x, y, res){
n = length(x)
mat = matrix(NA, nrow=B, ncol=512)
for(i in 1:B){
pos = sample(1:n, n, replace=TRUE)
x_local = x[sort(pos)]
y_local = y[sort(pos)]
mat[i, ] = genetic(x_local, y_local, "MDL", 0.9, 0.05, 300, 10)
}
return(mat)
}
f1.2(1, x, y, res)
qiwei = f1.2(1, x, y, res)
plot(x, qiwei)
print(load("~/Desktop/final12.rda"))
plot(x,y, cex=0.1)
lines(x,f,type="l", col="blue")
lb = sapply(1:512, function(i) quantile(final12[,i], 0.05))
ub = sapply(1:512, function(i) quantile(final12[,i], 0.95))
lines(x,lb,type="l", col="red")
lines(x,ub,type="l", col="red")
print(load("~/Desktop/final11.rda"))
plot(x,y, cex=0.1)
lines(x,f,type="l", col="blue")
lb = sapply(1:512, function(i) quantile(final11[,i], 0.05))
ub = sapply(1:512, function(i) quantile(final11[,i], 0.95))
lines(x,lb,type="l", col="red")
lines(x,ub,type="l", col="red")
print(load("~/Desktop/final12.rda"))
plot(x,y, cex=0.1)
lines(x,f,type="l", col="blue")
lb = sapply(1:512, function(i) quantile(final12[,i], 0.05))
ub = sapply(1:512, function(i) quantile(final12[,i], 0.95))
lines(x,lb,type="l", col="red")
lines(x,ub,type="l", col="red")
truefunction = function(x){
4*x-2 + 2*exp(-16*(4*x-2)^2)
}
x = c(0:511)/512
f = truefunction2(x)
set.seed(1)
sigma = sqrt(mean((truefunction2(runif(100000,0,1)))^2))/5
y = f + rnorm(512, 0, sigma)
plot(x, y)
truefunction = function(x){
4*x-2 + 2*exp(-16*(4*x-2)^2)
}
x = c(0:511)/512
f = truefunction(x)
set.seed(1)
sigma = sqrt(mean((truefunction2(runif(100000,0,1)))^2))/5
y = f + rnorm(512, 0, sigma)
plot(x, y)
lines(x, f, type="l", lwd=3)
y = f + rnorm(512, 0, sigma)
plot(x, y)
lines(x, f, type="l", lwd=3)
truefunction = function(x){
4*x-2 + 2*exp(-16*(4*x-2)^2)
}
x = c(0:511)/512
f = truefunction(x)
set.seed(1)
sigma = sqrt(mean((truefunction2(runif(100000,0,1)))^2))/5
y = f + rnorm(512, 0, sigma)
truefunction = function(x){
4*x-2 + 2*exp(-16*(4*x-2)^2)
}
x = c(0:511)/512
f = truefunction(x)
set.seed(1)
sigma = sqrt(mean((truefunction(runif(100000,0,1)))^2))/5
y = f + rnorm(512, 0, sigma)
plot(x, y)
lines(x, f, type="l", lwd=3)
res = genetic(x, y, "MDL", 0.9, 0.05, 300, 10)
plot(x, res)
print(load("~/Desktop/final21.rda"))
plot(x,y, cex=0.1)
lines(x,f,type="l", col="blue")
lb = sapply(1:512, function(i) quantile(final21[,i], 0.05))
ub = sapply(1:512, function(i) quantile(final21[,i], 0.95))
lines(x,lb,type="l", col="red")
lines(x,ub,type="l", col="red")
print(load("~/Desktop/final21.rda"))
plot(x,y, cex=0.1)
lines(x,f,type="l", col="blue")
lb = sapply(1:512, function(i) quantile(final21[,i], 0.05))
ub = sapply(1:512, function(i) quantile(final21[,i], 0.95))
lines(x,lb,type="l", col="red")
lines(x,ub,type="l", col="red")
print(load("~/Desktop/final22.rda"))
plot(x,y, cex=0.1)
lines(x,f,type="l", col="blue")
lb = sapply(1:512, function(i) quantile(final22[,i], 0.05))
ub = sapply(1:512, function(i) quantile(final22[,i], 0.95))
lines(x,lb,type="l", col="red")
lines(x,ub,type="l", col="red")
print(load("~/Desktop/final11.rda"))
plot(x,y, cex=0.1)
lines(x,f,type="l", col="blue")
lb = sapply(1:512, function(i) quantile(final11[,i], 0.025))
ub = sapply(1:512, function(i) quantile(final11[,i], 0.975))
lines(x,lb,type="l", col="red")
lines(x,ub,type="l", col="red")
print(load("~/Desktop/final12.rda"))
plot(x,y, cex=0.1)
lines(x,f,type="l", col="blue")
lb = sapply(1:512, function(i) quantile(final12[,i], 0.025))
ub = sapply(1:512, function(i) quantile(final12[,i], 0.975))
lines(x,lb,type="l", col="red")
lines(x,ub,type="l", col="red")
truefunction = function(x){
t = c(0.1, 0.13, 0.15, 0.23, 0.25, 0.4, 0.44, 0.65, 0.76, 0.78, 0.81)
h = c(4, -5, 3, -4, 5, -4.2, 2.1, 4.3, -3.1, 2.1, -4.2)
temp = 0
for(i in 1:11) {
temp = temp + h[i]/2 * (1 + sign(x - t[i])) }
return(temp)
}
n = 512
x = (0:(n-1))/n
f = truefunction(x)
set.seed(1)
y = f+rnorm(f)/3
res = genetic(x, y, "MDL", 0.9, 0.05, 300, 10)
print(load("~/Desktop/final11.rda"))
plot(x,y, cex=0.1)
lines(x,f,type="l", col="blue")
lb = sapply(1:512, function(i) quantile(final11[,i], 0.025))
ub = sapply(1:512, function(i) quantile(final11[,i], 0.975))
lines(x,lb,type="l", col="red")
lines(x,ub,type="l", col="red")
print(load("~/Desktop/final12.rda"))
plot(x,y, cex=0.1)
lines(x,f,type="l", col="blue")
lb = sapply(1:512, function(i) quantile(final12[,i], 0.025))
ub = sapply(1:512, function(i) quantile(final12[,i], 0.975))
lines(x,lb,type="l", col="red")
lines(x,ub,type="l", col="red")
par(mar=rep(1,4))
print(load("~/Desktop/final11.rda"))
plot(x,y, cex=0.1)
lines(x,f,type="l", col="blue")
lb = sapply(1:512, function(i) quantile(final11[,i], 0.025))
ub = sapply(1:512, function(i) quantile(final11[,i], 0.975))
lines(x,lb,type="l", col="red")
lines(x,ub,type="l", col="red")
print(load("~/Desktop/final12.rda"))
plot(x,y, cex=0.1)
lines(x,f,type="l", col="blue")
lb = sapply(1:512, function(i) quantile(final12[,i], 0.025))
ub = sapply(1:512, function(i) quantile(final12[,i], 0.975))
lines(x,lb,type="l", col="red")
lines(x,ub,type="l", col="red")
par(mar=rep(2,4))
print(load("~/Desktop/final11.rda"))
plot(x,y, cex=0.1)
lines(x,f,type="l", col="blue")
lb = sapply(1:512, function(i) quantile(final11[,i], 0.025))
ub = sapply(1:512, function(i) quantile(final11[,i], 0.975))
lines(x,lb,type="l", col="red")
lines(x,ub,type="l", col="red")
print(load("~/Desktop/final12.rda"))
plot(x,y, cex=0.1)
lines(x,f,type="l", col="blue")
lb = sapply(1:512, function(i) quantile(final12[,i], 0.025))
ub = sapply(1:512, function(i) quantile(final12[,i], 0.975))
lines(x,lb,type="l", col="red")
lines(x,ub,type="l", col="red")
truefunction = function(x){
4*x-2 + 2*exp(-16*(4*x-2)^2)
}
x = c(0:511)/512
f = truefunction(x)
set.seed(1)
sigma = sqrt(mean((truefunction(runif(100000,0,1)))^2))/5
y = f + rnorm(512, 0, sigma)
res = genetic(x, y, "MDL", 0.9, 0.05, 300, 10)
print(load("~/Desktop/final21.rda"))
plot(x,y, cex=0.1)
lines(x,f,type="l", col="blue")
lb = sapply(1:512, function(i) quantile(final21[,i], 0.025))
ub = sapply(1:512, function(i) quantile(final21[,i], 0.975))
lines(x,lb,type="l", col="red")
lines(x,ub,type="l", col="red")
print(load("~/Desktop/final22.rda"))
plot(x,y, cex=0.1)
lines(x,f,type="l", col="blue")
lb = sapply(1:512, function(i) quantile(final22[,i], 0.025))
ub = sapply(1:512, function(i) quantile(final22[,i], 0.975))
lines(x,lb,type="l", col="red")
lines(x,ub,type="l", col="red")
shiny::runApp('Box Sync/CEA/department diagnostic/v2.5')
setwd("~/Github/expedia-hotel-recommendations/")
data = read.csv("data/csv2/50-628-8250.csv")
