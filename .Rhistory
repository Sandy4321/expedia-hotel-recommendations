head(admission2)
admit_term = merge(student2, admission2, by="PIDM", all=TRUE)
levels(admit_term$ADMIT_LEVEL.x)=c("H","A")
admit_term$ADMIT_LEVEL.x = as.character(admit_term$ADMIT_LEVEL.x)
admit_term$ADMIT_LEVEL.y = as.character(admit_term$ADMIT_LEVEL.y)
head(admit_term)
admit_term[admit_term$PIDM==271, ]
admit_term$ADMIT_TERM = admit_term$ADMIT_TERM.y
admit_term$ADMIT_TERM[is.na(admit_term$ADMIT_TERM)] = admit_term$ADMIT_TERM.x[is.na(admit_term$ADMIT_TERM)]
admit_term$ADMIT_LEVEL = admit_term$ADMIT_LEVEL.y
admit_term$ADMIT_LEVEL[is.na(admit_term$ADMIT_LEVEL)] = admit_term$ADMIT_LEVEL.x[is.na(admit_term$ADMIT_LEVEL)]
admit_term = admit_term[-which(duplicated(admit_term$PIDM)), ]
admit_term[admit_term$PIDM==271, ]
admit_term = admit_term[ , c("PIDM","ADMIT_TERM","ADMIT_LEVEL")]
rm(admission, admission2, student, student2)
head(course)
course = course[ , c("PIDM", "TERM", "DEPT", "SUBJ", "CRSE", "GRADE", "UNITS", "GRADE_PT",)]
course = merge(course, admit_term, by = "PIDM", all.x = TRUE)
course$SUBJCRSE = paste0(course$SUBJ, course$CRSE)
course$PT_ID = as.numeric(paste0(course$PIDM, course$TERM))
course = course[order(course$PT_ID), ]
# get course heatmap in DDD
load("~/Box Sync/CEA/data/original data/orig course.rda")
load("~/Box Sync/CEA/data/original data/orig student.rda")
load("~/Box Sync/CEA/data/original data/orig term.rda")
load("~/Box Sync/CEA/data/original data/orig admission.rda")
sharedmajors = read.csv("~/Box Sync/CEA/data/original data/shared_major_descs.csv")
load("~/Box Sync/CEA/department diagnostic/v2.4.1//data/af.rda")
head(af)
af2 = af[ , c("PIDM","GRADUATED","FOUR_YR_GRAD","GRAD_MAJOR", "MAJORFULL")]
af2 = af2[!duplicated(af2$PIDM), ]
head(af2)
student2 = student[ , c("PIDM", "ADMIT_TERM", "ADMIT_LEVEL")]
student2$ADMIT_TERM = student2$ADMIT_TERM %/% 100
student2$ADMIT_TERM = paste0(student2$ADMIT_TERM, '10')
table(student2$ADMIT_TERM)
admission2 = admission[ , c("PIDM", "TERM", "ADMIT_LEVEL")]
names(admission2)[2] = "ADMIT_TERM"
head(admission2)
admit_term = merge(student2, admission2, by="PIDM", all=TRUE)
levels(admit_term$ADMIT_LEVEL.x)=c("H","A")
admit_term$ADMIT_LEVEL.x = as.character(admit_term$ADMIT_LEVEL.x)
admit_term$ADMIT_LEVEL.y = as.character(admit_term$ADMIT_LEVEL.y)
head(admit_term)
admit_term[admit_term$PIDM==271, ]
admit_term$ADMIT_TERM = admit_term$ADMIT_TERM.y
admit_term$ADMIT_TERM[is.na(admit_term$ADMIT_TERM)] = admit_term$ADMIT_TERM.x[is.na(admit_term$ADMIT_TERM)]
admit_term$ADMIT_LEVEL = admit_term$ADMIT_LEVEL.y
admit_term$ADMIT_LEVEL[is.na(admit_term$ADMIT_LEVEL)] = admit_term$ADMIT_LEVEL.x[is.na(admit_term$ADMIT_LEVEL)]
admit_term = admit_term[-which(duplicated(admit_term$PIDM)), ]
admit_term[admit_term$PIDM==271, ]
admit_term = admit_term[ , c("PIDM","ADMIT_TERM","ADMIT_LEVEL")]
rm(admission, admission2, student, student2)
course = course[ , c("PIDM", "TERM", "DEPT", "SUBJ", "CRSE", "GRADE", "UNITS", "GRADE_PT")]
course = merge(course, admit_term, by = "PIDM", all.x = TRUE)
course$SUBJCRSE = paste0(course$SUBJ, course$CRSE)
course$PT_ID = as.numeric(paste0(course$PIDM, course$TERM))
course = course[order(course$PT_ID), ]
head(course,40)
addOn = c(0, 91, 93, 95, 97)
addOn = c(addOn, addOn+100, addOn+200, addOn+300, addOn+400)
addOn = as.data.frame(cbind(addOn, c(1:length(addOn))))
names(addOn) = c("addOn", "relativeTerm")
str(course)
course$ADMIT_TERM = as.numeric(course$ADMIT_TERM)
course$diff = course$TERM - course$ADMIT_TERM
table(course$diff)
addOn
course = merge(course, addOn, by.x="diff", by.y="addOn", all.x=TRUE)
course = course[order(course$PT_ID), ]
head(course,40)
term$PT_ID = as.numeric(paste0(term$PIDM, term$TERM))
term = term[ , c("PT_ID", "MAJOR_1_DESC", "MAJOR_2_DESC", "MAJOR_3_DESC")]
term$MAJOR_1_DESC[term$MAJOR_1_DESC==""]=NA
term$MAJOR_2_DESC[term$MAJOR_2_DESC==""]=NA
term$MAJOR_3_DESC[term$MAJOR_3_DESC==""]=NA
term = merge(x=term, y=sharedmajors, by.x="MAJOR_1_DESC", by.y="MAJOR_DESC", all.x=TRUE)
names(term)[which(names(term)=="WM_CONCAT.CODE.")]="MAJOR_1"
term = merge(x=term, y=sharedmajors, by.x="MAJOR_2_DESC", by.y="MAJOR_DESC", all.x=TRUE)
names(term)[which(names(term)=="WM_CONCAT.CODE.")]="MAJOR_2"
term = merge(x=term, y=sharedmajors, by.x="MAJOR_3_DESC", by.y="MAJOR_DESC", all.x=TRUE)
names(term)[which(names(term)=="WM_CONCAT.CODE.")]="MAJOR_3"
term = term[order(term$PT_ID), ]
term$MAJOR_1_DESC <- NULL
term$MAJOR_2_DESC <- NULL
term$MAJOR_3_DESC <- NULL
head(term,100)
course = merge(course, term, by="PT_ID", all.x=TRUE)
head(course)
course = merge(course, af2, by="PIDM", all.x=TRUE)
head(course)
save(course, file = "~/Box Sync/CEA/department diagnostic/v2.4.1/data/course.rda")
shiny::runApp('Box Sync/CEA/department diagnostic/v2.5')
shiny::runApp('Box Sync/CEA/department diagnostic/v2.5')
shiny::runApp('Box Sync/CEA/department diagnostic/Zhongkun Jin/v2.4.1')
shiny::runApp('Box Sync/CEA/department diagnostic/v2.5')
shiny::runApp('Box Sync/CEA/department diagnostic/v2.5')
shiny::runApp('Box Sync/CEA/department diagnostic/v2.5')
load("~/Box Sync/CEA/data/original data/orig course.rda")
load("~/Box Sync/CEA/data/original data/orig student.rda")
load("~/Box Sync/CEA/data/original data/orig term.rda")
load("~/Box Sync/CEA/data/original data/orig admission.rda")
sharedmajors = read.csv("~/Box Sync/CEA/data/original data/shared_major_descs.csv")
load("~/Box Sync/CEA/department diagnostic/v2.4.1//data/af.rda")
head(af)
af2 = af[ , c("PIDM","GRADUATED","FOUR_YR_GRAD","GRAD_MAJOR", "MAJORFULL")]
af2 = af2[!duplicated(af2$PIDM), ]
head(af2)
student2 = student[ , c("PIDM", "ADMIT_TERM", "ADMIT_LEVEL")]
student2$ADMIT_TERM = student2$ADMIT_TERM %/% 100
student2$ADMIT_TERM = paste0(student2$ADMIT_TERM, '10')
table(student2$ADMIT_TERM)
admission2 = admission[ , c("PIDM", "TERM", "ADMIT_LEVEL")]
names(admission2)[2] = "ADMIT_TERM"
head(admission2)
admit_term = merge(student2, admission2, by="PIDM", all=TRUE)
levels(admit_term$ADMIT_LEVEL.x)=c("H","A")
admit_term$ADMIT_LEVEL.x = as.character(admit_term$ADMIT_LEVEL.x)
admit_term$ADMIT_LEVEL.y = as.character(admit_term$ADMIT_LEVEL.y)
head(admit_term)
admit_term[admit_term$PIDM==271, ]
admit_term$ADMIT_TERM = admit_term$ADMIT_TERM.y
admit_term$ADMIT_TERM[is.na(admit_term$ADMIT_TERM)] = admit_term$ADMIT_TERM.x[is.na(admit_term$ADMIT_TERM)]
admit_term$ADMIT_LEVEL = admit_term$ADMIT_LEVEL.y
admit_term$ADMIT_LEVEL[is.na(admit_term$ADMIT_LEVEL)] = admit_term$ADMIT_LEVEL.x[is.na(admit_term$ADMIT_LEVEL)]
admit_term = admit_term[-which(duplicated(admit_term$PIDM)), ]
admit_term[admit_term$PIDM==271, ]
admit_term = admit_term[ , c("PIDM","ADMIT_TERM","ADMIT_LEVEL")]
rm(admission, admission2, student, student2)
course = course[ , c("PIDM", "TERM", "DEPT", "SUBJ", "CRSE", "GRADE", "UNITS", "GRADE_PT")]
course = merge(course, admit_term, by = "PIDM", all.x = TRUE)
course$SUBJCRSE = paste0(course$SUBJ, course$CRSE)
course$PT_ID = as.numeric(paste0(course$PIDM, course$TERM))
course = course[order(course$PT_ID), ]
head(course,40)
addOn = c(0, 91, 93, 95, 97)
addOn = c(addOn, addOn+100, addOn+200, addOn+300, addOn+400)
addOn = as.data.frame(cbind(addOn, c(1:length(addOn))))
names(addOn) = c("addOn", "relativeTerm")
addOn
course$ADMIT_TERM = as.numeric(course$ADMIT_TERM)
table(course$ADMIT_TERM)
200010 + addOn[,1]
shiny::runApp('Box Sync/CEA/department diagnostic/v2.5')
shiny::runApp('Box Sync/CEA/department diagnostic/v2.5')
shiny::runApp('Box Sync/CEA/department diagnostic/v2.5')
shiny::runApp('Box Sync/CEA/department diagnostic/v2.5')
shiny::runApp('Box Sync/CEA/department diagnostic/v2.5')
shiny::runApp('Box Sync/CEA/department diagnostic/v2.5')
shiny::runApp('Box Sync/CEA/department diagnostic/v2.5')
load("~/Box Sync/CEA/department diagnostic/Xinyi Hou/v2.4.1/data/studentInfo.rda")
head(studentInfo)
head(studentInfo)
head(studentInfo, 40)
tail(studentInfo, 40)
shiny::runApp('Box Sync/CEA/department diagnostic/v2.5')
shiny::runApp('Box Sync/CEA/department diagnostic/Ruoxin Li/v2.4.1')
shiny::runApp('Box Sync/CEA/department diagnostic/v2.5')
shiny::runApp('Box Sync/CEA/department diagnostic/v2.5')
shiny::runApp('Box Sync/CEA/department diagnostic/v2.5')
library(plyr)
library(dplyr)
shiny::runApp('Box Sync/CEA/department diagnostic/v2.5')
shiny::runApp('Box Sync/CEA/department diagnostic/v2.5')
shiny::runApp('Box Sync/CEA/department diagnostic/v2.5')
shiny::runApp('Box Sync/CEA/department diagnostic/v2.5')
shiny::runApp('Box Sync/CEA/department diagnostic/v2.5')
shiny::runApp('Box Sync/CEA/department diagnostic/v2.5')
shiny::runApp('Box Sync/CEA/department diagnostic/v2.5')
ls()
mySubset = studentInfo2[studentInfo2$shared_admission_major %in% input$chosenMajorStudent_mr, ]
#Select Cohort
mySubset = mySubset[(mySubset$ADMIT_TERM%/%100 >= input$studentYear_mr[1])&(mySubset$ADMIT_TERM%/%100 <= input$studentYear_mr[2]),]
#Select variables
mySubset = mySubset[,c('PIDM','TERM','MAJOR_1','ADMIT_TERM','ADMIT_LEVEL','shared_admission_major')]
mySubset = mySubset[substring(mySubset$TERM,5,6) %in% c('01','03','05','07','10'),]
mySubset$ADMIT_YEAR = as.numeric(substring(mySubset$ADMIT_TERM,1,4))
mySubset$YEAR = as.numeric(substring(mySubset$TERM,1,4))
mySubset$ADMIT_Quarter = as.numeric(substring(mySubset$ADMIT_TERM,5,6))
mySubset$ADMIT_Quarter[mySubset$ADMIT_Quarter==10]=9
mySubset$ADMIT_Quarter = (mySubset$ADMIT_Quarter + 1)/2
mySubset$Quarter = as.numeric(substring(mySubset$TERM,5,6))
mySubset$Quarter[mySubset$Quarter==10]=9
mySubset$Quarter = (mySubset$Quarter + 1)/2
mySubset$relative_term = with(mySubset,(YEAR - ADMIT_YEAR)*5 - (Quarter - ADMIT_Quarter) + 1)
mySubset = mySubset[mySubset$relative_term>=0,]
mySubset[mySubset$ADMIT_LEVEL=='A',c('relative_term')] = mySubset[mySubset$ADMIT_LEVEL=='A',c('relative_term')] + 10
#Select 20 relative terms:
mySubset = mySubset[mySubset$relative_term<=20,]
#Select people stay in the input major:
mySubset = mySubset[mySubset$MAJOR_1==mySubset$shared_admission_major,]
head(mmySubset)
head(mySubset)
mySubset = studentInfo2[studentInfo2$shared_admission_major %in% input$chosenMajorStudent_mr, ]
head(mmySubset)
head(mySubset)
dim(mySubset)
mySubset = mySubset[(mySubset$ADMIT_TERM%/%100 >= input$studentYear_mr[1])&(mySubset$ADMIT_TERM%/%100 <= input$studentYear_mr[2]),]
dim(mySubset)
mySubset = mySubset[,c('PIDM','TERM','MAJOR_1','ADMIT_TERM','ADMIT_LEVEL','shared_admission_major')]
dim(mySubset)
mySubset = mySubset[substring(mySubset$TERM,5,6) %in% c('01','03','05','07','10'),]
dim(mySubset)
mySubset$ADMIT_YEAR = as.numeric(substring(mySubset$ADMIT_TERM,1,4))
dim(mySubset)
mySubset$YEAR = as.numeric(substring(mySubset$TERM,1,4))
mySubset$ADMIT_Quarter = as.numeric(substring(mySubset$ADMIT_TERM,5,6))
mySubset$ADMIT_Quarter[mySubset$ADMIT_Quarter==10]=9
mySubset$ADMIT_Quarter = (mySubset$ADMIT_Quarter + 1)/2
mySubset$Quarter = as.numeric(substring(mySubset$TERM,5,6))
mySubset$Quarter[mySubset$Quarter==10]=9
mySubset$Quarter = (mySubset$Quarter + 1)/2
mySubset$relative_term = with(mySubset,(YEAR - ADMIT_YEAR)*5 - (Quarter - ADMIT_Quarter) + 1)
mySubset = mySubset[mySubset$relative_term>=0,]
dim(mySubset)
mySubset[mySubset$ADMIT_LEVEL=='A',c('relative_term')] = mySubset[mySubset$ADMIT_LEVEL=='A',c('relative_term')] + 10
dim(mySubset)
mySubset = mySubset[mySubset$relative_term<=20,]
dim(mySubset)
mySubset = mySubset[mySubset$MAJOR_1==mySubset$shared_admission_major,]
dim(mySubset)
mySubset = mySubset %>% group_by(PIDM) %>% mutate(lastterm = max(relative_term))
dim(mySubset)
mySubset = mySubset[,-c(2,8,10,11)]
dim(mySubset)
mySubset = mySubset[!duplicated(mySubset$PIDM),]
dim(mySubset)
#Subset the degree
my_degree = degree[degree$LEVL=='UG',]
my_degree = degree[degree$PIDM %in% mySubset$PIDM,]
admission_major = as.character(unique(studentInfo2$MAJOR))
shared_major = unique(studentInfo2$MAJOR_1)
s = sapply(admission_major,function(i)grep(i,shared_major))
admisson_shared_major = data.frame(admission_major,shared_major[s])
my_degree = merge(my_degree,admisson_shared_major,by.x = 'MAJOR',by.y = 'admission_major')
my_degree = my_degree[,c('PIDM','TERM','MAJOR','shared_major.s.')]
my_degree = my_degree[my_degree$shared_major.s. %in% input$chosenMajorStudent_mr,]
dim(my_degree)
mySubset = merge(mySubset,my_degree,by.x = c('PIDM','shared_admission_major'),by.y = c('PIDM','shared_major.s.'),all.x = TRUE)
mySubset$Grad_Year = as.numeric(substring(mySubset$TERM,1,4))
mySubset$Grad_Quarter = as.numeric(substring(mySubset$TERM,5,6))
mySubset$Grad_Quarter[mySubset$Grad_Quarter==10]=9
mySubset$Grad_Quarter = (mySubset$Grad_Quarter + 1)/2
mySubset$relative_term2 = with(mySubset,(Grad_Year - ADMIT_YEAR)*5 - (Grad_Quarter - ADMIT_Quarter) + 1)
head(mySubset)
mySubset[mySubset$relative_term2<20 & !is.na(mySubset$relative_term2),c('lastterm')] = 20
head(mySubset)
mrdf = mySubset %>%
group_by(shared_admission_major,lastterm) %>%
summarise(count = n())
mrdf
?n
?dplyr::n()
dplyr::n()
dplyr::n
mrdf = mySubset %>%
group_by(shared_admission_major,lastterm) %>%
summarise(count = dplyr::n())
mrdf = mySubset %>%
group_by(shared_admission_major,lastterm) %>%
summarise(count = dplyr:::n())
mrdf = mySubset %>%
group_by(shared_admission_major,lastterm) %>%
summarise(count = n())
mrdf = mrdf %>%
group_by(shared_admission_major) %>%
mutate(majorsum = sum(count)) %>%
mutate(frac = count/majorsum)
mrdf = mrdf %>%
group_by(shared_admission_major) %>%
mutate(cum = 1 - cumsum(frac))
mrdf = mrdf[!is.na(mrdf$shared_admission_major),]
mrdf[mrdf$lastterm==20,c('cum')]=mrdf[which(mrdf$lastterm==20)-1,c('cum')]
mrdf[(nrow(mrdf)+1):(nrow(mrdf)+length(input$chosenMajorStudent_mr)),] = mrdf[mrdf$lastterm==20,]
mrdf[(nrow(mrdf)-length(input$chosenMajorStudent_mr)+1):(nrow(mrdf)),c('cum')] = 1
mrdf[(nrow(mrdf)-length(input$chosenMajorStudent_mr)+1):(nrow(mrdf)),c('lastterm')] = 0
#Add some observation, to get piecewise constant
for (i in 1:length(input$chosenMajorStudent_mr)){
for (j in 1:20){
if(nrow(mrdf[(mrdf$shared_admission_major==input$chosenMajorStudent_mr[i])&(mrdf$lastterm==j),])==0){
mrdf[nrow(mrdf)+1,]= mrdf[(mrdf$shared_admission_major==input$chosenMajorStudent_mr[i])&(mrdf$lastterm==(j-1)),]
mrdf[nrow(mrdf),c('lastterm')]=j
}
}
}
mrdf$lastterm = mrdf$lastterm + 1
mrdf = mrdf[mrdf$lastterm<=20,]
mrdf = mrdf %>% arrange(lastterm)
mrdf
shiny::runApp('Box Sync/CEA/department diagnostic/v2.5')
shiny::runApp('Box Sync/CEA/department diagnostic/v2.5')
shiny::runApp('Box Sync/CEA/department diagnostic/v2.5')
shiny::runApp('Box Sync/CEA/department diagnostic/v2.5')
shiny::runApp('Box Sync/CEA/department diagnostic/v2.5')
mySubset = studentInfo2[studentInfo2$shared_admission_major %in%
input$chosenMajorStudent_mr, ]
mySubset = mySubset[(mySubset$ADMIT_TERM%/%100 >= input$studentYear_mr[1]) &
(mySubset$ADMIT_TERM%/%100 <= input$studentYear_mr[2]),
]
mySubset = mySubset[, c("PIDM", "TERM", "MAJOR_1", "ADMIT_TERM",
"ADMIT_LEVEL", "shared_admission_major")]
mySubset = mySubset[substring(mySubset$TERM, 5, 6) %in% c("01",
"03", "05", "07", "10"), ]
mySubset$ADMIT_YEAR = as.numeric(substring(mySubset$ADMIT_TERM,
1, 4))
mySubset$YEAR = as.numeric(substring(mySubset$TERM, 1, 4))
mySubset$ADMIT_Quarter = as.numeric(substring(mySubset$ADMIT_TERM,
5, 6))
mySubset$ADMIT_Quarter[mySubset$ADMIT_Quarter == 10] = 9
mySubset$ADMIT_Quarter = (mySubset$ADMIT_Quarter + 1)/2
mySubset$Quarter = as.numeric(substring(mySubset$TERM, 5,
6))
mySubset$Quarter[mySubset$Quarter == 10] = 9
mySubset$Quarter = (mySubset$Quarter + 1)/2
mySubset$relative_term = with(mySubset, (YEAR - ADMIT_YEAR) *
5 - (Quarter - ADMIT_Quarter) + 1)
mySubset = mySubset[mySubset$relative_term >= 0, ]
mySubset[mySubset$ADMIT_LEVEL == "A", c("relative_term")] = mySubset[mySubset$ADMIT_LEVEL ==
"A", c("relative_term")] + 10
mySubset = mySubset[mySubset$relative_term <= 20, ]
mySubset = mySubset[mySubset$MAJOR_1 == mySubset$shared_admission_major,
]
mySubset = mySubset %>% group_by(PIDM) %>% mutate(lastterm = max(relative_term))
mySubset = mySubset[, -c(2, 8, 10, 11)]
mySubset = mySubset[!duplicated(mySubset$PIDM), ]
my_degree = degree[degree$LEVL == "UG", ]
my_degree = degree[degree$PIDM %in% mySubset$PIDM, ]
admission_major = as.character(unique(studentInfo2$MAJOR))
shared_major = unique(studentInfo2$MAJOR_1)
s = sapply(admission_major, function(i) grep(i, shared_major))
admisson_shared_major = data.frame(admission_major, shared_major[s])
my_degree = merge(my_degree, admisson_shared_major, by.x = "MAJOR",
by.y = "admission_major")
my_degree = my_degree[, c("PIDM", "TERM", "MAJOR", "shared_major.s.")]
my_degree = my_degree[my_degree$shared_major.s. %in% input$chosenMajorStudent_mr,
]
mySubset = merge(mySubset, my_degree, by.x = c("PIDM", "shared_admission_major"),
by.y = c("PIDM", "shared_major.s."), all.x = TRUE)
mySubset$Grad_Year = as.numeric(substring(mySubset$TERM,
1, 4))
mySubset$Grad_Quarter = as.numeric(substring(mySubset$TERM,
5, 6))
mySubset$Grad_Quarter[mySubset$Grad_Quarter == 10] = 9
mySubset$Grad_Quarter = (mySubset$Grad_Quarter + 1)/2
mySubset$relative_term2 = with(mySubset, (Grad_Year - ADMIT_YEAR) *
5 - (Grad_Quarter - ADMIT_Quarter) + 1)
mySubset[mySubset$relative_term2 < 20 & !is.na(mySubset$relative_term2),
c("lastterm")] = 20
mrdf = mySubset %>% group_by(shared_admission_major, lastterm) %>%
summarise(count = n())
mrdf = mrdf %>% group_by(shared_admission_major) %>% mutate(majorsum = sum(count)) %>%
mutate(frac = count/majorsum)
mrdf = mrdf %>% group_by(shared_admission_major) %>% mutate(cum = 1 -
cumsum(frac))
mrdf = mrdf[!is.na(mrdf$shared_admission_major), ]
mrdf[mrdf$lastterm == 20, c("cum")] = mrdf[which(mrdf$lastterm ==
20) - 1, c("cum")]
mrdf[(nrow(mrdf) + 1):(nrow(mrdf) + length(input$chosenMajorStudent_mr)),
] = mrdf[mrdf$lastterm == 20, ]
mrdf[(nrow(mrdf) - length(input$chosenMajorStudent_mr) +
1):(nrow(mrdf)), c("cum")] = 1
mrdf[(nrow(mrdf) - length(input$chosenMajorStudent_mr) +
1):(nrow(mrdf)), c("lastterm")] = 0
for (i in 1:length(input$chosenMajorStudent_mr)) {
for (j in 1:20) {
if (nrow(mrdf[(mrdf$shared_admission_major == input$chosenMajorStudent_mr[i]) &
(mrdf$lastterm == j), ]) == 0) {
mrdf[nrow(mrdf) + 1, ] = mrdf[(mrdf$shared_admission_major ==
input$chosenMajorStudent_mr[i]) & (mrdf$lastterm ==
(j - 1)), ]
mrdf[nrow(mrdf), c("lastterm")] = j
}
}
}
mrdf$lastterm = mrdf$lastterm + 1
mrdf = mrdf[mrdf$lastterm <= 20, ]
mrdf = mrdf %>% arrange(lastterm)
mrdf
shiny::runApp('Box Sync/CEA/department diagnostic/v2.5')
ls()
mrdf
mrdf$cumFrac = cumsum(mrdf$frac)
mrdf
mrdf$cumFrac = 1-cumsum(mrdf$frac)
mrdf$cumFrac
mrdf
shiny::runApp('Box Sync/CEA/department diagnostic/v2.5')
mrdf$cum = 1-cumsum(mrdf$frac)
mmrdf
mrdf
mrdf = mrdf[!is.na(mrdf$shared_admission_major),]
mrdf
mrdf[mrdf$lastterm==20,c('cum')]=mrdf[which(mrdf$lastterm==20)-1,c('cum')]
mrdf
mrdf[(nrow(mrdf)+1):(nrow(mrdf)+length(input$chosenMajorStudent_mr)),] = mrdf[mrdf$lastterm==20,]
mrdf[(nrow(mrdf)-length(input$chosenMajorStudent_mr)+1):(nrow(mrdf)),c('cum')] = 1
mrdf[(nrow(mrdf)-length(input$chosenMajorStudent_mr)+1):(nrow(mrdf)),c('lastterm')] = 0
mrdf
mrdf$cum = 1-cumsum(mrdf$frac)
mrdf = mrdf[!is.na(mrdf$shared_admission_major),]
mrdf[mrdf$lastterm==20,c('cum')]=mrdf[which(mrdf$lastterm==20)-1,c('cum')]
mrdf
for (i in 1:length(input$chosenMajorStudent_mr)){
for (j in 1:20){
if(nrow(mrdf[(mrdf$shared_admission_major==input$chosenMajorStudent_mr[i])&(mrdf$lastterm==j),])==0){
mrdf[nrow(mrdf)+1,]= mrdf[(mrdf$shared_admission_major==input$chosenMajorStudent_mr[i])&(mrdf$lastterm==(j-1)),]
mrdf[nrow(mrdf),c('lastterm')]=j
}
}
}
mrdf$lasttermmrdf
mrdf
shiny::runApp('Box Sync/CEA/department diagnostic/v2.5')
shiny::runApp('Box Sync/CEA/department diagnostic/v2.5')
shiny::runApp('Box Sync/CEA/department diagnostic/v2.5')
mrdf$cum = 1-cumsum(mrdf$frac)
mrdf = mrdf[!is.na(mrdf$shared_admission_major),]
mrdf[mrdf$lastterm==20,c('cum')]=mrdf[which(mrdf$lastterm==20)-1,c('cum')]
mrdf
for (i in 1:length(input$chosenMajorStudent_mr)){
for (j in 1:20){
if(nrow(mrdf[(mrdf$shared_admission_major==input$chosenMajorStudent_mr[i])&(mrdf$lastterm==j),])==0){
mrdf[nrow(mrdf)+1,]= mrdf[(mrdf$shared_admission_major==input$chosenMajorStudent_mr[i])&(mrdf$lastterm==(j-1)),]
mrdf[nrow(mrdf),c('lastterm')]=j
}
}
}
mrdf
mrdf$cum = 1-cumsum(mrdf$frac)
mrdf = mrdf[!is.na(mrdf$shared_admission_major),]
mrdf[mrdf$lastterm==20,c('cum')]=mrdf[which(mrdf$lastterm==20)-1,c('cum')]
mrdf[(nrow(mrdf)+1):(nrow(mrdf)+length(input$chosenMajorStudent_mr)),] = mrdf[mrdf$lastterm==20,]
mrdf[(nrow(mrdf)-length(input$chosenMajorStudent_mr)+1):(nrow(mrdf)),c('cum')] = 1
mrdf[(nrow(mrdf)-length(input$chosenMajorStudent_mr)+1):(nrow(mrdf)),c('lastterm')] = 0
#Add some observation, to get piecewise constant
for (i in 1:length(input$chosenMajorStudent_mr)){
for (j in 1:20){
if(nrow(mrdf[(mrdf$shared_admission_major==input$chosenMajorStudent_mr[i])&(mrdf$lastterm==j),])==0){
mrdf[nrow(mrdf)+1,]= mrdf[(mrdf$shared_admission_major==input$chosenMajorStudent_mr[i])&(mrdf$lastterm==(j-1)),]
mrdf[nrow(mrdf),c('lastterm')]=j
}
}
}
mrdf
mrdf$lastterm = mrdf$lastterm + 1
mrdf = mrdf[mrdf$lastterm<=20,]
mrdf = mrdf %>% arrange(lastterm)
mrdf
shiny::runApp('Box Sync/CEA/department diagnostic/v2.5')
shiny::runApp('Box Sync/CEA/department diagnostic/v2.5')
shiny::runApp('Box Sync/CEA/department diagnostic/v2.5')
shiny::runApp('Box Sync/CEA/department diagnostic/v2.5')
setwd("~/Github/expedia-hotel-recommendations")
load("data/dest.rda")
dim(dest)
dest[1:5, 1:5]
names(dest)
str(dest)
vcm = cov(dest[ , -1])
eigs = eigen(vcm)
plot(eigs$values)
plot(cumsum(eigs$values))
plot(cumsum(eigs$values), type"l")
plot(cumsum(eigs$values), type="l")
plot(eigs$values)
par(mfrow=c(2,2))
plot(eigs$values)
plot(cumsum(eigs$values), type="l")
par(mfrow=c(1,2))
plot(eigs$values)
plot(cumsum(eigs$values), type="l")
sum(eigs$values)
plot(cumsum(eigs$values)/sum(eigs$values), type="l")
plot(cumsum(eigs$values)/sum(eigs$values), type="l", ylab="percent of total variance")
plot(cumsum(eigs$values)/sum(eigs$values), type="l", ylab="percent of total variance")
abline(h=0.9)
plot(cumsum(eigs$values)/sum(eigs$values), ylab="percent of total variance")
abline(h=0.9)
par(mfrow=c(1,2))
plot(eigs$values)
plot(cumsum(eigs$values)/sum(eigs$values), ylab="percent of total variance")
abline(h=0.9)
which(cumsum(eigs$values)/sum(eigs$values) >= 0.9)
which(cumsum(eigs$values)/sum(eigs$values) >= 0.9)[1]
which(cumsum(eigs$values)/sum(eigs$values) >= 0.8)[1] # 36
which(cumsum(eigs$values)/sum(eigs$values) >= 0.95)[1] # 36
head(dest[,1])
max(dest[,1])
dim(dest)
dim(dest[,-1])
dim(eigs$vectors)
?eigen
new_dest = cbind(dest[,1], dest[,-1] %*% eigs$vectors)
class(dest[,-1])
dim(as.matrix(dest[,-1]))
new_dest = cbind(dest[,1], as.matrix(dest[,-1]) %*% eigs$vectors)
save(new_dest, file="new_dest.rda")
system.time(load("data/train.rda"))
system.time(load("data/test.rda"))
names(train)
length(unique(train$user_location_country))
length(unique(train$user_location_region))
length(unique(train$user_location_city))
length(unique(train$user_id))
str(train)
names(train)
head(train$user_id)
head(train$user_id,40)
train[which(train$user_id == 756), ]
load("~/Box Sync/CEA/department diagnostic/v2.5/data/orig major.rda")
rm(test)
rm(train)
